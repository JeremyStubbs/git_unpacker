# Form implementation generated from reading ui file 'git_thing.ui'
#
# Created by: PyQt6 UI code generator 6.2.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import os 
import re
from pathlib import Path
import shutil
import asyncio

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(79, 20, 101, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(79, 90, 101, 20))
        self.label_2.setObjectName("label_2")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(200, 20, 281, 21))
        self.lineEdit.setObjectName("lineEdit")

        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(200, 90, 281, 21))
        self.lineEdit_2.setObjectName("lineEdit_2")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.run())
        self.pushButton.setGeometry(QtCore.QRect(240, 170, 113, 32))
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def run(self):
        x = self.lineEdit.text()
        y = self.lineEdit_2.text()
        print(x,y)

        def branches():
            branches =  os.popen("git branch -a").read()[:-1].split("\n")
            pattern = re.compile(r'^(?!remotes).+')
            matches = []
            for branch in branches:
                x = branch.lstrip()
                if x[0]=="*":
                        x=x[1:].lstrip()
                if pattern.match(x):
                    matches.append(x)
            return matches

        # Function to copy contents of each branch to a folder called "copy" on desktop
        async def copy(name):
            os.popen("git checkout "+name)
            print(">>>Waiting to switch branches")
            await asyncio.sleep(2)
            os.popen(f"cp -R {x} /{y}/{name}" )
            print('>>>Copied folder')

        # Eventually will worked for nested folders. For now can go to path manually.
        os.chdir(x)


        # Make folder called "copy" in desktop - delete if already exists
        dirpath = Path(y)
        if dirpath.exists() and dirpath.is_dir():
            shutil.rmtree(dirpath)

        os.mkdir(y)

        # Get branches
        the_branches = branches()
        print(the_branches)

        # Call copy on each branch
        for branch in the_branches:
            asyncio.run(copy(branch))

            



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Source directory"))
        self.label_2.setText(_translate("MainWindow", "Destination"))
        self.pushButton.setText(_translate("MainWindow", "Run"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
